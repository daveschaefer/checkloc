High-level overview of changes

Format:
+ new feature
* bug or behavior fix
i internal refactoring/structural change. No external or behavioural differences.

We attempt to use meaningful version numbers, following semver.org:
	Given a version number MAJOR.MINOR.PATCH, increment the:
	MAJOR version when you make backwards-incompatible changes,
	MINOR version when you add functionality in a backwards-compatible manner
	PATCH version when you make backwards-compatible bug fixes.


2.1.4
-----
Internal cleanup release

i Refactor classes: remove global state; use proper encapsulation with arguments
i Move checkloc code to its own class
i Move classes to their own files
i Refactor tests to use classes and interface
i Fix more bugs with pylint: fix long line indentation, clean up variable names.
i Arrange files into proper package layout
* Fix error message and exit code when importing lxml module
* Provide better UI: continue to run if passed exact path to chrome.manifest file rather than the directory name
* Copyedit readme


2.1.3
-----
* Fix many bugs with pylint
	main code: -5.33 -> 7.13
	locale file: -382.50 -> 7.50
	tests: -2.17 -> 6.98


2.1.2
-----
* Add locale 'tl'
* Minor README copyedit


2.1.1
-----
* Explicitly and only add namespaces we need when searching. Fix for behaviour change in lxml 3.5.0 (GH #14)


2.1
---
+ Add switch to group output by language
+ Add switch to output results as JSON rather than normal print statements
	(implies grouping by language)


2.0
---
* Change module interface - pass the location of the chrome.manifest file, rather
	than passing the path to individual locale directories.

	This ensures correct behaviour and detection, as locale directories
	can be calculated and located by reading chrome.manifest.
	This allows checkloc to properly parse and handle extensions that store locales
	in any arbitrary folder, rather than only those that use a standard 'chrome/locale' setup.
+ Improve error message for chrome.manifest locale lines with invalid syntax
+ Add new testcases:
	+ All entries in install.rdf also exist in chrome.manifest
	+ Any locale can be located in a non-standard subdirectory (i.e. not 'chrome/locale')
	+ Different locales can be located and registered in different directories
	+ 'locale' registration lines in chrome.manifest must use the correct syntax
* Always raise all warnings during unit tests, to ensure we can correctly detect program behaviour


1.3.1
-----
* Add python shebang line for better platform portability
* Replace list of locale groups with better list of locale codes
	Initial list taken from https://svn.mozilla.org/libs/product-details/json/languages.json
* Add more locale codes found in use by extensions


1.3
---
+ Add tests to validate the contents of chrome.manifest and install.rdf:
	+ Check every chrome.manifest entry to make sure a corresponding locale folder exists
	+ Check every locale folder to ensure a corresponding entry exists in chrome.manifest
	+ Check that chrome.manifest locale codes exist in the list of possible locale codes
	+ Check that no locales are defined more than once inside chrome.manifest
	+ Check that install.rdf is valid XML
	+ Check every install.rdf entry to make sure a corresponding locale folder exists
	+ Check every locale folder to ensure a corresponding entry exists in install.rdf
	+ Check that install.rdf locale codes exist in the list of possible locale codes
	+ Check that no locales are defined more than once inside install.rdf
+ Add test case to fail gracefully if run against a folder that does not contain localization data
+ Add ability to test for warnings inside self-checking unit tests
+ Add test case to verify warnings are generated when blank string DTD values are found
* Fix incorrect variable usage inside LocalizationLanguage.get_loc_keys()
* Fix bug: still capture DTD entities even if they have a blank value


1.2
----
* Add basic unit tests to check parsing and validation
* Change DTD parsing to retrieve the first error, rather than the last
+ On DTD parsing error, print the offending line and highlight the place where the error might be
  (to help with troubleshooting and fixing)
* Convert error for empty DTD values to warning (empty DTD values will work, but may not be what you want)
* Fix bug parsing '%S' matches in .properties files
* Fix bug detecting when one language contains a .properties string substitution that is not in the baseline
+ Properly detect when the baseline contains a .properties string substitution that is not found in all other languages
* Fix and improve many behaviours for parsing .properties files (thanks to foudfou for inspiring this with a pull request):
	* .properties comments can also start with !
	* Allow many additional characters in .properties keys .-+\{}[]!@#$%^&*()/<>,?;'"`~|
	* Allow : to separate .properties keys and values
	* Allow whitespace between key names and values
	* Allow whitespace before key names
	* Comment characters # and ! can be used inside .properties values
	.properties file parsing should now more closely match the specification and tests run against Firefox
+ Add Mozilla-specific test: no more than 10 unique string substitutions in any .properties value
* Fix .properties comment regex
+ Optimization: skip blank lines when parsing .properties files
* Convert assertions to normal errors and make the script exit normally/gracefully under those conditions (ensures we always have consistent output and can be called on anything)
* Copyedit feedback messages
+ Add several new info messages when parsing
* Copyedit README
i Refactor localization parsing and storage code into its own class


1.1.1
-----
* Fix path calculation to work for all types of path parameters


1.1
---
+ Add test: verify that string substitutions inside .properties files are the same across all languages


1.0
---
Initial version

Covers the following test cases:

    1. No localization has extra files
    2. No localization is missing files
    3. Each localization has at least one key
    4. No localization has extra keys
    5. No localization is missing keys
    6. No key is blank
    7. DTD key names contain no invalid characters, including "!@#$%^&*<>[](){} ?'
    8. DTD values contain no invalid characters, including "%<&
    9. DTD comments contain no double hyphens --
    10. .properties values are valid, meaning either:
        10a) no % on a line
        10b) double %% to escape and print a regular %
        10c) %S or %n$S , where n is a number, for formatted string replacement.
    11. No files contain the Byte Order Marker (BOM)
    12. No localization has duplicate keys defined in the same .properties file
